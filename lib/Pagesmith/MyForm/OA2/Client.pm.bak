package Pagesmith::MyForm::OA2::Client;

## Admininstration form for objects of type Client
## in namespace OA2

## Author         : James Smith <js5>
## Maintainer     : James Smith <js5>
## Created        : Tue, 07 Jan 2014
## Last commit by : $Author: $
## Last modified  : $Date: $
## Revision       : $Revision: $
## Repository URL : $HeadURL: $

use strict;
use warnings;
use utf8;

use version qw(qv); our $VERSION = qv('0.1.0');

use base qw(Pagesmith::MyForm::OA2);
use Pagesmith::Adaptor::OA2::Client;
use Pagesmith::Object::OA2::Client;

sub fetch_object {
  my $self = shift;##
  
  if( $self->{'object_id'} =~ m{\Aproject-(\d+)}mxsg ) {
    my $project_id = $1;
    my $project = $self->adaptor('Project')->fetch_project( $project_id );
    return unless $project;
    $self->{'_project_defn'} = $project;
    return 1;
  }
  my $db_obj = $self->adaptor( 'Client' )->fetch_client( $self->{'object_id'} );
  return unless $db_obj;
  $self->{'object'}        = $db_obj;
  $self->{'_project_defn'} = $db_obj->get_project();
  return 1;
}

sub populate_object_values {
  my $self = shift;
  return $self unless $self->object && ref $self->object;

  $self->element( 'code'         )->set_obj_data( [$self->object->get_code       ] );
  $self->element( 'secret'       )->set_obj_data( [$self->object->get_secret     ] );
  $self->element( 'client_type'  )->set_obj_data( [$self->object->get_client_type] );
  my @urls = @{$self->object->fetch_urls||[]};
  $self->element( 'rediect_url'        )->set_value([map {$_->get_uri} grep { $_->get_type eq 'redirect' } @urls ]);
  $self->element( 'javascript_origins' )->set_value([map {$_->get_uri} grep { $_->get_type eq 'source' } @urls ]);
  return $self;
}

sub update_object {
  my $self = shift;
  ## Copy form values back to object...

  $self->object->set_code(         $self->element( 'code'         )->scalar_value );
  $self->object->set_secret(       $self->element( 'secret'       )->scalar_value );
  $self->object->set_client_type(  $self->element( 'client_type'  )->scalar_value );
  $self->object->store;
  my $current = {};
  foreach ( @{$self->object->fetch_urls||[]} ) {
    $current->{$_->get_type}{$_->get_uri} = $_;
  }

  foreach ( $self->element('redirect_url')->multi_values ) {
    if( exists $current->{'redirect'}{$_} ) {
      delete $current->{'redirect'}{$_};
    } else {
      $self->object->add_uri( 'redirect', $uri )->store;
    }
  }
  foreach ( $self->element('javascript_origins')->multi_values ) {
    if( exists $current->{'source'}{$_} ) {
      delete $current->{'source'}{$_};
    } else {
      $self->object->add_uri( 'source', $uri )->store;
    }
  }
  $_->remove foreach map { values %{$_}  } values %{$current};

  return 1;
}

sub create_object {
  my $self = shift;
  ## Creates new object with values from form...
  my $new_obj = $self->adaptor( 'Client' )->create;

  $new_obj->set_code(         $self->element( 'code'         )->scalar_value );
  $new_obj->set_secret(       $self->element( 'secret'       )->scalar_value );
  $new_obj->set_client_type(  $self->element( 'client_type'  )->scalar_value );
  return unless $new_obj->store();
  my $uri_adaptor = $self->object->get_other_adaptor('Url');
  $new_obj->add_uri( 'redirect', $_ ) foreach $self->element('redirect_url'      )->multi_values;
  $new_obj->add_uri( 'source',   $_ ) foreach $self->element('javascript_origins')->multi_values;
  $self->set_object( $new_obj )->set_object_id( $new_obj->uid );
  return 1;
}



sub initialize_form {
  my $self = shift;

  ## Set up the form...
  ## no critic (LongChainsOfMethodCalls)
  $self->set_title( 'Client' )
       ->force_form_code
       ->add_attribute( 'id',     'Client' )
       ->add_attribute( 'method', 'post' )
       ->add_class(          'form',     'check' )          # Javascript validation is enabled
       ->add_class(          'section',  'panel' )          # Form sections are wrapped in panels
       ->add_form_attribute( 'method',   'post' )
       ->set_option(         'validate_before_next' )
       ->set_option(         'no_reset' )
       ->add_class(          'progress', 'panel' )
       ;

## Now add the elements

    $self->add_stage('Client');
    $self->add_section( 'Administration of Client objects' );
    $self->set_next( 'Create' );

      $self->add('Hidden','client_id')
         ->set_optional;

      $self->add('String','code')
        ->set_readonly
        ->set_optional
        ->set_caption( 'Code' )
        ->add_class('24');

      $self->add('String','secret')
        ->set_optional
        ->set_readonly
        ->set_caption( 'Secret' );

      $self->add('DropDown','client_type')
        ->set_caption( 'Client type' )
          ->set_values( Pagesmith::Object::OA2::Client->dropdown_values_client_type );

      $self->add('CheckBox','flush')
        ->set_caption( 'Check this box to generate a new code/secret' )
        ->set_optional;

      $self->add('URL','redirect_url')
        ->set_multiple
        ->clear_fetch_title
        ->set_optional;

      $self->add('URL','javascript_origins')
        ->set_multiple
        ->clear_fetch_title
        ->set_optional;

  ## use critic

  $self->add_confirmation_stage( 'please_confirm_details' );
    $self->add_section( 'please_confirm_details' );
      $self->add( { 'type' => 'Information', 'caption' => 'Please confirm the details below and press next to update object' } );

    $self->add_readonly_section;

    $self->add_section( 'information' );

      $self->add( { 'type' => 'Information', 'caption' => 'Press "confirm" to update object' } );

  $self->add_final_stage( 'thank_you' );

    $self->add_raw_section( '<p>The object has been updated</p>', 'Thank you' );

    $self->add_readonly_section;

  $self->add_error_stage( 'not_logged_in' );

    $self->add_raw_section( '<% File /core/inc/forms/no_user.inc %>' );

  $self->add_error_stage( 'no_permission'  );

    $self->add_raw_section( '<% File /core/inc/forms/no_permission.inc %>' );

  return $self;
}

1;
